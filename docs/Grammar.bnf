# Malt(rmalt) Grammar

None ::= 'none' ;

Bool ::= 'false' | 'true' ;

Atom ::= Char | CharString | Rational | Int | Uint | Bool | None ;

Tuple ::= '(' Obj (',' Obj)* | ',' ')' ;

Obj ::= Tuple | Atom ;

Call ::= Expr Expr ;

Lambda ::= '\' Mode = Sentences ;

Expr ::= Call | If | Match | Let | Lambda ;

Sentences ::= Expr (('\n', Sentences)* | '\n') ;

#Tag ::= "[<" sym ">]" ;

If ::=
    "if" Expr "then" Sentence "else" Sentences |
    "if" Expr "then" Sentence ;

Match ::=
    "match" Expr "with"
    ('|' Mode "=>" Expr)*

#Let ::= 'let' Mode = Sentences ;

Module ::= 'module' sym '=' Let* '.';

Open :: "open" String "as" sym

File ::= Open* Module;

Repl ::= Expr